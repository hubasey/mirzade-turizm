version: '3.8'

services:
  db:
    image: postgres:14.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod
    restart: always
    networks:
      - mirzade_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}

  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    volumes:
      - static_volume:/code/static
      - media_volume:/code/media
    env_file:
      - ./.env.prod
    depends_on:
      - db
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn mirzade.wsgi:application --bind 0.0.0.0:8000 --workers=4 --timeout=120"
    networks:
      - mirzade_network
    expose:
      - 8000

  nginx:
    image: nginx:1.21-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/static
      - media_volume:/media
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - web
    restart: always
    networks:
      - mirzade_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - mirzade_network

  cron:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - static_volume:/code/static
      - media_volume:/code/media
      - ./logs:/code/logs
    env_file:
      - ./.env.prod
    depends_on:
      - web
    restart: always
    networks:
      - mirzade_network
    command: >
      sh -c "apt-get update && 
             apt-get install -y cron && 
             echo '0 3 * * * cd /code && python manage.py fetch_google_reviews --min-rating=4 >> /code/logs/cron.log 2>&1' > /etc/cron.d/google-reviews && 
             echo '0 1 * * * /code/scripts/backup.sh >> /code/logs/backup.log 2>&1' >> /etc/cron.d/google-reviews &&
             chmod 0644 /etc/cron.d/google-reviews && 
             crontab /etc/cron.d/google-reviews && 
             mkdir -p /code/logs && 
             touch /code/logs/cron.log && 
             touch /code/logs/backup.log && 
             cron -f"

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  mirzade_network:
    driver: bridge 